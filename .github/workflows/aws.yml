name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      working-directory: ./demo
      run: chmod +x gradlew

    - name: Build with Gradle
      working-directory: ./demo
      run: ./gradlew clean build -x test

    # 빌드 결과물 저장
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: demo/build/libs/*.jar

  test:
    needs: build  # 빌드 완료 후 실행
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: 'gradle'

    # 빌드 결과물 다운로드
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-artifact
        path: demo/build/libs

    - name: Grant execute permission for gradlew
      working-directory: ./demo
      run: chmod +x gradlew

    - name: Run tests
      working-directory: ./demo
      run: ./gradlew test

    # 테스트 결과 저장
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          demo/build/reports/tests/test/
          demo/build/test-results/test/

  deploy:
    needs: [build, test]  # build와 test 모두 성공해야 실행
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 빌드 결과물 다운로드
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-artifact
        path: build/libs

    # 버전 설정
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        else
          echo "VERSION=latest" >> $GITHUB_ENV
        fi

    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Docker 빌드 및 푸시
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }} -f demo/Dockerfile demo/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }}
        
        if [ "${{ github.event_name }}" == "push" ]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        fi

    # ECS 서비스 업데이트
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment
